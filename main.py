import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hbold
from aiogram.filters import CommandStart
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import asyncio
from datetime import datetime, timedelta
import db  # –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å SQLite
from messages import AUTOFLOW_MESSAGES  # —Ü–µ–ø–æ—á–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
PDF_LINK = os.getenv("PDF_LINK")
PRESENT_LINK = os.getenv("PRESENT_LINK")


if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è PDF
def get_main_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="check_sub")],
    ])
    return kb


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ email
class Form(StatesGroup):
    waiting_for_email = State()


# /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    text = (
        f"{hbold('–ü—Ä–∏–≤–µ—Ç!')}\n\n"
        "üìò –ü–æ–ª—É—á–∏ –≥–∞–π–¥ ¬´3 —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∏–º–∞—é—Ç 80% –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤¬ª.\n\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å PDF:\n1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}\n2. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )
    await message.answer(text, reply_markup=get_main_kb())


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –≤—ã–¥–∞—á–∞ PDF –∏ –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ email
@dp.callback_query(F.data == "check_sub")
async def check_subscription(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    from_user = callback.from_user

    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status not in ("left", "kicked"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            if not db.user_exists(user_id):
                db.add_user(
                    user_id=user_id,
                    full_name=from_user.full_name,
                    username=from_user.username
                )

            await callback.message.answer(
                f"üéÅ –í–æ—Ç —Ç–≤–æ–π –≥–∞–π–¥:\nüëâ <a href='{PDF_LINK}'>–°–∫–∞—á–∞—Ç—å PDF</a>",
                disable_web_page_preview=True
            )

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
            email = db.get_user_email(user_id)
            if not email:
                await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π email, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:")
                await state.set_state(Form.waiting_for_email)
            else:
                await callback.message.answer("–ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–π email. –°–ø–∞—Å–∏–±–æ!")

        else:
            await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ email
@dp.message(Form.waiting_for_email)
async def email_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    email = message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    if '@' not in email or '.' not in email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return

    db.set_email(user_id, email)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π email —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await state.clear()


@dp.message(F.text.lower() == "—Ö–æ—á—É –ø–æ–¥–∞—Ä–æ–∫")
async def handle_gift_request(message: types.Message):
    await message.answer(
        "üéÅ –î–µ—Ä–∂–∏ –Ω–∞—à –∞–≤—Ç–æ—Ä—Å–∫–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ ¬´–ê –ø–æ—á–µ–º—É —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ?¬ª\n\n"
        f"üëâ <a href='{PRESENT_LINK}'>–°–∫–∞—á–∞—Ç—å PDF</a>",
        disable_web_page_preview=True
    )


# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
async def send_scheduled_messages():
    while True:
        users = db.get_all_users()
        now = datetime.now()

        for user_id, start_date_str, email in users:
            start_date = datetime.fromisoformat(start_date_str)
            day_num = (now.date() - start_date.date()).days
            if 0 <= day_num < len(AUTOFLOW_MESSAGES):
                try:
                    await bot.send_message(user_id, AUTOFLOW_MESSAGES[day_num])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")

        await asyncio.sleep(24 * 3600)  # –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

if __name__ == "__main__":
    import db
    db.init_db()

    async def main():
        asyncio.create_task(send_scheduled_messages())
        await dp.start_polling(bot)

    asyncio.run(main())
